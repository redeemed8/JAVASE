package Multi_Thread.Wait_Wakeup;

public class Introduce {
    public static void main(String[] args) {
        //  等待唤醒机制
        //  打破线程执行的随机性，使其轮流执行
        //  分为 生产者 和 消费者
        //      生产数据  消费数据

        //  简单比方为 厨师 和 吃货
        //  核心思想：利用 桌子 来控制线程的执行
        //  如果 桌子上有食物，那么轮到吃货吃，没食物轮到厨师做

        //  消费者等待
        //  ① 判断桌子上是否有食物
        //  ② 如果没有就等待
        //  ③ 有就开吃
        //  ④ 吃完就要唤醒厨师继续做

        //  生产者等待
        //  ① 判断桌子上有没有食物
        //  ② 有：等待
        //  ③ 没有：制作食物
        //  ④ 把食物放在桌子上
        //  ⑤ 叫醒等待的消费者开吃

        //  涉及方法
        //  wait        当前线程等待，直到被其他线程唤醒
        //  notify      随机唤醒单个线程
        //  notifyAll   唤醒所有正在等待的线程

    }
}
